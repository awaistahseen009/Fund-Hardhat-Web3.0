{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identfier:MIT\r\npragma solidity ^0.8.0;\r\nimport \"./PriceConverter.sol\";\r\nerror notOwner();\r\ncontract FundMe{\r\n    using PriceConverter for uint256;\r\n    address private immutable i_owner;\r\n    uint256 private minUSD=50*1e18;\r\n    address[] public funders;\r\n    AggregatorV3Interface private priceFeed;\r\n    mapping(address => uint256) public addMoneyMapping;\r\n    constructor (address priceFeedAddress){\r\n        priceFeed=AggregatorV3Interface(priceFeedAddress);\r\n        i_owner=msg.sender;\r\n    }\r\n    function fund() public payable{\r\n        require(msg.value.getConversionRate(priceFeed)<=minUSD,\"Dont have enough eth\");\r\n        funders.push(msg.sender);\r\n        addMoneyMapping[msg.sender]+=msg.value; \r\n    }\r\n    modifier onlyOwner{\r\n        if(msg.sender!=i_owner)\r\n        revert notOwner();\r\n        _;\r\n    }\r\n    function withdraw() public onlyOwner {\r\n        for(uint256 i=0;i<funders.length;i++){\r\n            address funder=funders[i];\r\n            addMoneyMapping[funder]=0;\r\n        }\r\n        funders= new address[](0);\r\n        (bool callSuccess,)=payable(msg.sender).call{value:address(this).balance}(\"\");\r\n        require(callSuccess,\"Send Failed !\");\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nlibrary PriceConverter{\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        (,int256 price,,,)=priceFeed.latestRoundData();\r\n        return uint256(price*1e10);\r\n    }\r\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        uint256 latestPrice=getPrice(priceFeed);\r\n        return (latestPrice*ethAmount)/1e18;\r\n    }\r\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}